*------------------------------------------------------------------------------------*
!
! Program: The parameter setup of SVJ with CKKW-L and MLM jet merging for Pythia8
!          I refer to CKKW-L
!          https://github.com/YW-Hsiao/SVJ_CKKWL/blob/main/s-channel_ckkwl-v2/hepmc/svj_ckkwl-4.cmnd
!          MLM
!          https://github.com/YW-Hsiao/SVJ_Model/blob/main/s-channel/cmnd-tcl/rinv03/Lam_d5/svj0_run2.cmnd
! Author: You-Wei Hsiao
! Institute: Department of Physics, National Tsing Hua University, Hsinchu, Taiwan
! Mail: hsiao.phys@gapp.nthu.edu.tw
! History: 2022/03/05 (First release)
!        2022/03/08 (update detail)
! Version: v.1.0
!
*------------------------------------------------------------------------------------*

*-----------------------------  Main-Program Settings  ------------------------------*
!
! Initialization settings
Init:showAllSettings = on

! Event-generation settings
Next:numberCount = 1000
Next:numberShowInfo = 1
Next:numberShowProcess = 1
Next:numberShowEvent = 1

! Main-program settings
Main:numberOfEvents = 10000
Main:timesAllowErrors = 3

! Random-Number Seed
Random:setSeed = on
Random:seed = 100
!
! 1. showAllSettings: Print a list of all flag/mode/parameter/word settings, Warning: this will be a long list.
! 2. numberCount: Print a line telling how many events have been generated so far, once every numberCount events.
!    If set zero then no lines are ever printed.
! 3. numberShowInfo: The number of events to list the Info information for, where relevant.
! 4. numberShowProcess: The number of events to list the process record for, where relevant.
! 5. numberShowEvent: The number of events to list the event record for, where relevant.
! 6. numberOfEvents: The number of events to be generated.
! 7. timesAllowErrors: Allow this many times that pythia.next() returns false,
!    i.e. that an event is flawed, before aborting the run.
! 8. setSeed: Indicates whether a user-set seed should be used every time the Pythis::init routine is called.
! 9. The seed to be used, if setSeed is on.
! Remark: The order is different from reference.
!         Random:setSeed on/off
!
*----------------------------  End Main-Program Settings  ----------------------------*

*-------------------------------  Particle Data Scheme  ------------------------------*
!
4900001:m0 = 50000
4900002:m0 = 50000
4900003:m0 = 50000
4900004:m0 = 50000
4900005:m0 = 50000
4900006:m0 = 50000
4900011:m0 = 50000
4900012:m0 = 50000
4900013:m0 = 50000
4900014:m0 = 50000
4900015:m0 = 50000
4900016:m0 = 50000
!
! PID: minimal HV particles, there is a set of 12 particles that mirrors the SM flavour structure,
!      and is charged under both the SM and the HV symmetry groups.
! m0: the nominal mass m_0 (in GeV).
! Remark: We don't want to these particles to be generated.
!
*----------------------------  End Particle Data Scheme  ----------------------------*

*-----------------------------  Hidden Valley Processes  ----------------------------*
!
HiddenValley:Ngauge = 2
HiddenValley:alphaOrder = 1
HiddenValley:Lambda = 5
HiddenValley:nFlav = 2
! HiddenValley:alphaFSR = 5
HiddenValley:spinFv = 0
HiddenValley:FSR = on
HiddenValley:fragment = on
HiddenValley:pTminFSR = 5.5
HiddenValley:probVector = 0.75
!
! 1. Ngauge: SU(N) if Ngauge > 1. Pair production cross sections contains a factor of Ngauge for new particles
!    in the fundamental representation of this group.
! 2. alphaOrder: Order at which alpha_HV runs,
!    option 1: first order, with the beta function based on Ngauge and NFlav.
!    This option can not be used for the U(1) case, but only for the SU(N) ones.
! 3. Lambda: confinement scale; the Lambda_HV parameter used for the case of a running (first order) ...
!    alpha_HV(Q^2) = 12 * pi/((11 * Ngauge - 2 * nFlav) * ln(Q^2/Lambda_HV^2))
!    i.e. when HiddenValley:alphaOrder = 1
! 4. nFlav: number of different flavours assumed to exist in the hadronization description,
!    leading to approximately 1/n_Flav of the produced HV-mesons being flavour-diagonal and
!    capable to decay back to Standard Model particles.
! 5. alphaFSR: fixed alpha_HV scale of gv/gammav emission, used when HiddenValley:alphaOrder = 0,
!    but not used when it is = 1.
! 6. spinFv: The spin of the HV partners of the SM fermions, e.g. Dv, Uv, Ev and nuEv.
! 7. FSR: switch on final-state shower of gv or gammav in a HV production process.
! 8. fragment: switch on string fragmentation of the HV partonic system. Only relevant for SU(N) scenarios.
! 9. pTminFSR: lowest allowed pT of emission. Should be greater than or equal to 1.1 times Lambda,
!    or it will be reset automatically.
! 10. probVector: fraction of HV-mesons that are assigned spin 1 (vector), with the remainder spin 0 (pseudoscalar).
!     Assuming the qv have spin 1/2 and the mass splitting is small, spin counting predicts that 3/4 of
!      the mesons should have spin 1.
! Remark:
!        a. Lambda: for alphaOrder = 1 and the formula is the equation of 1707.05326
!        b. nFlav: so the number of unstable dark mesons is about 1/nFlav
!        Optionally up to 8 different such flavours can be allowed in the hidden sector, identities 4900101 - 4900108.
!        The actual number used is set by HiddenValley:nFlav.
!        c. alphaFSR: We can switch off HiddenValley:alphaFSR option, due to be used when HiddenValley:alphaOrder = 0.
!        d. spinFv: this is not important, since there is no HV partners (no Qv -> q + qv process).
!                   zero flavor in hadronization
!        e. pTminFSR: Notice that 1.1 * Lambda
!        f. probVector: It is related to qv mass splitting.
!
*---------------------------  End Hidden Valley Processes  --------------------------*

*------------------------------  Particle Data Scheme  ------------------------------*
!
4900101:m0 = 10.0
4900101:mWidth = 0.2
4900101:mMin = 9.8
4900101:mMax = 10.2
4900111:m0 = 20
4900113:m0 = 20
4900211:m0 = 20
4900213:m0 = 20
51:m0 = 9.99
53:m0 = 9.99
! 4900211:m0 = 9.99
! 4900213:m0 = 9.99
!
! 1. 4900101: hidden valley quark; for the basic HV scenario, there is a new massive particle with only HV charge
!    4900101 - 4900108 are given by HiddenValley:nFlav
! 2. 4900111: pivDiag, a flavour-diagonal HV-meson with spin-0, that can decay back into the SM
! 3. 4900113: rhovDiag, a flavour-diagonal HV-meson with spin-1, that can decay back into the SM
! 4. 4900211: pivUp, an off-diagonal HV-meson with spin-0, that is stable and invisible
! 5. 4900213: rhovUp, an off-diagonal HV-meson with spin-1, that is stable and invisible
! 6. 51: DM with spin-0
! 7. 53: DM with spin-1
! 8. m0: the nominal mass m_0 (in GeV)
! 9. mWidth: the width Gamma of the Breit-Wigner distribution (in GeV)
! 10. mMin: the lower limit of the allowed mass range generated by the Breit-Wigner (in GeV)
! 11. mMax: the upper limit of the allowed mass range generated by the Breit-Wigner (in GeV)
! Remark: 4900101 has mass width, due to HiddenValley:probVector and ???
!
*------------------------------------------------------------------------------------*
!
! Decay channel
4900111:onechannel = 1 0.7 91 -3 3
4900111:addchannel = 1 0.3 0 51 -51

4900113:onechannel = 1 0.14 91 -1 1
4900113:addchannel = 1 0.14 91 -2 2
4900113:addchannel = 1 0.14 91 -3 3
4900113:addchannel = 1 0.14 91 -4 4
4900113:addchannel = 1 0.14 91 -5 5
4900113:addchannel = 1 0.3 0 53 -53

4900211:onechannel = 1 0.7 91 -3 3
4900211:addchannel = 1 0.3 0 51 -51

4900213:onechannel = 1 0.14 91 -1 1
4900213:addchannel = 1 0.14 91 -2 2
4900213:addchannel = 1 0.14 91 -3 3
4900213:addchannel = 1 0.14 91 -4 4
4900213:addchannel = 1 0.14 91 -5 5
4900213:addchannel = 1 0.3 0 53 -53
!
! 1. id:onechannel = onMode bRatio meMode product1 product2 ...
! 2. id:addchannel = onMode bRatio meMode product1 product2 ...
! 3. onMode: integer code for use or not of channel,
!    0 if a channel is off,
!    1 if on,
! 4. bRatio: the branching ratio of the channel (with some reservations for resonances)
! 5. meMode: the mode of processing this channel, possibly with matrix elements; ...
! 6. product(i): the identity code of the decay products, where i runs between 0 and multiplicity - 1.
!    Trailing positions are filled with 0.
! Remark: We need to switch off the decay channels of 4900211 and 4900213.
!
*----------------------------  End Particle Data Scheme  ----------------------------*

*------------------------------  Matching and Merging  ------------------------------*
!
! CKKW-L merging (Merging with merging scale defined in kT)
Merging:doKTMerging = on
Merging:ktType = 1
Merging:Dparameter = 0.4
Merging:nJetMax = 2
Merging:TMS = 20
Merging:Process = pp>{xd,4900101}{xd~,-4900101}
Merging:nQuarksMerge = 5
! Merging:mayRemoveDecayProducts = on  ! key point
! Merging:doMerging = on
!
! 1. doKTMerging: If the additional jets in the LHE files have been regulared by a kT cut,
!    the user can supply the merging scale definition by setting this flag to on.
!    kT here and below means cutting on Durham kT for e+e- collisions,
!    and cutting on longitudinally invariant kT for hadronic collisions.
!    Please note that this particular merging scale definition will check kT between
!    all pairs of u, d, c, s, b, g partons.
! 2. ktType: Precise functional definition of longitudinally invariant kT.
!    For e+e- collisions, Durham kT is always defined by the square root of
!    min{2 * min[Ei^2,Ej^2] * [1 - cos(theta_ij)]}, so that this switch will have no effect.
!    option 1 & 2 use rapidity & pseudorapidity of partons is used.
! 3. Dparameter: The value of the D parameter needed in the definition of longitudinally invariant kT separation.
! 4. nJetMax: Maximal number of additional jets in the matrix element.
! 5. TMS: The value of the merging scale.
!    In the particular case of kT-merging, this would be the value of the kT-cut in GeV.
!    For any merging scale definition, this input is considered the actual value of the merging scale.
! 6. Process: The string specifying the hard core process, in MG4/ME notation.
! 7. nQuarksMerge: This switch controls which quarks flavours are considered additional partons.
!    If e.g. set to 4, then u-, d-, c- and s-quarks will be merged, while b-quarks will not be considered in the merging.
! 8. mayRemoveDecayProducts: Remove products of resonances in the hard process, in case Pythia generated decay products before merging.
! 9. doMerging: Finally, it is also possible to switch on the merging machinery without switching on specific merging procedure,
!    by turning this setting on.
! Remark: I don't understand ktType and Dparameter
!         See 'Defining the "inclusive" merging process' and 'Setting the number of additional particles' in PYTHIA8 official web
!         nQuarksMerge: I think the t-quark has no merging??
!         mayRemoveDecayProducts: I not sure under what scenario it would be used.
!         doMerging: I think this is simple and fast version.
!
*------------------------------------------------------------------------------------*
!
! MLM jet merging
JetMatching:merge = on
JetMatching:setMad = on
JetMatching:scheme = 1
JetMatching:jetAlgorithm = 2
JetMatching:exclusive = 2
JetMatching:nJetMax = 2
JetMatching:qCut = 100
JetMatching:nQmatch = 5
JetMatching:clFact = 1.0
!
! 1. merge: Master switch to activate parton-jet matching.
! 2. setMad: When enabled, the merging parameters are set according to the values in the LHEF header.
! 3. scheme: The parton-jet MLM-style merging scheme.
!    option 1: The one inspired by the Madgraph scheme, here implemented in the JetMatchingMadgraph class.
! 4. jetAlgorithm: The choice of jet algorithm to use when merging against hard partons.
!    Currently, only SlowJet with the kT algorithm is supported for Madgraph-style merging.
!    option 2: The SlowJet clustering algorithm
! 5. exclusive: Exclusive or inclusive merging.
! 6. nJetMax: When JetMatching:exclusive = 2, nJetMax is used to indicate the maximum number of jets that will be matched.
! 7. qCut: kT scale for merging shower products into jets.
! 8. nQmatch: Controls the treatment of heavy quarks.
!    option 5: All quarks (except top) are treated as light quarks for matching.
! 9. clFact: The clFact parameter determines how jet-to parton matching is done.
! Remark:
!         JetMatching:doMerging = ickkw
!         JetMatching:qCut = xqcut
!         JetMatching:nQmatch = maxjetflavor
!         JetMatching:clFact = alpsfact
!
*----------------------------  End Matching and Merging  ----------------------------*

*--------------------  Main-Program Settings and Beam Parameters  -------------------*
!
LHEFInputs:nSubruns       = 1
Main:subrun               = 0
Beams:frameType = 4
Beams:LHEF = /youwei_home/SVJ_CKKWL/s-channel_ckkwl-v2/s/Events/run_01/unweighted_events.lhe
!
! 1. nSubruns: New setting to allow processing of multiple input LHEFs.
! 2. The number of the current subrun, a non-negative integer, put as first line in a section
!    of lines to be read for this particular subrun.
! 3. frameType: Choice of frame for the two colliding particles.
!    option 4: the beam and event information is stored in a Les Houches Event File.
! 4. LHEF: The name of a Les Houches Event File, to be set if Beams:frameType = 4.
!
*------------------  End Main-Program Settings and Beam Parameters  -----------------*
